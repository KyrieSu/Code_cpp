RMQ = Range Minimum(Maximum) Query
arr = [10, 2, 23, 4, 45, 1, 42, 34, 4, 23] -> N
0 5
4 7

Segment Tree

                    0-7

        0-3                    4-7

  0-1         2-3         4-5         6-7

0     1     2     3     4     5     6     7


arr = [1, 2, 2, 3, 4, 5, 6, 1]

0~5
0~5 = 0~3 + 4~5

0~2 = 0~1 + 2~2

Struct Node {
    int left, right;
    int value;
    Node *left, *right;
};

Query Sum:
                     24(0-7)

         8                       16

   3           5           9           7

1     2     2     3     4     5     6     1


Query Max:
                     7

         7                       6

   7           6           5           6

7     2     2     6     4     5     6     1

            1
        2       3
      4   5   6   7 

lazy 懶人標記(懶標)

                     7'

         7                       6'

   7           3           5'          6

7     2     3     3    3     5     6      1

build: O(n)
query: O(logn)
single cover: O(logn)
mutiple cover: 懶標

1 2 3 4 
1 2 3 4 . . . .

---

sparse table

max
[1, 2, 2, 3, 4, 5, 6, 1]
        
       0-0 
arr1 = [1, 2, 2, 3, 4, 5, 6, 1]  一次一個

       0-11-2 
arr2 = [2, 2, 3, 4, 5, 6, 6]        2

       0-3   2-5 3-6 4-7
arr3 = [3, 4, 5, 6, 6]              4

       0-7
arr4 = [6]                          8

0-5 -> 5
0-6 -> 6
0-2 -> 2
2-7 -> 6

build: O(nlogn)
query: O(1)

---

arr[][]
build: O(n^2)
query: O(1)

---

Bi-BFS
    
    o       o
        o

        o

    o       o
 o     o o     o
            o     o
 

 3 = 3 * 2^0 第一層
 6 = 3 * 2^1
 12= 3 * 2^2
 .
 .
 l-1層 = 3 * 2^(l-2)

 3 * 2^(l-1)

 O(2^l)  =  M^2

 O(2^(l/2)) = M

---

fast-pow

求 2^n -> O(logn)

[ 1 1 ][ 1 ] = [ 1 ] -> 1
[ 1 0 ][ 0 ] = [ 1 ]

[ 1 1 ][ 1 ] = [ 2 ] -> 2
[ 1 0 ][ 1 ] = [ 1 ]

[ 1 1 ]^2  [ 1 ] = [ 2 ]
[ 1 0 ]    [ 0 ] = [ 1 ]

[ 1 1 ][ 2 ] = [ 3 ] 
[ 1 0 ][ 1 ] = [ 2 ]

[ 1 1 ][ 3 ] = [ 5 ] 
[ 1 0 ][ 2 ] = [ 3 ]

[ 1 1 ][ 5 ] = [ 8 ] 
[ 1 0 ][ 3 ] = [ 5 ]

O(logn) 求得 費事數列第 n 項


